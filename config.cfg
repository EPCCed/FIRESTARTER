###############################################################################
# FIRESTARTER - A Processor Stress Test Utility
# Copyright (C) 2019 TU Dresden, Center for Information Services and High
# Performance Computing
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: daniel.hackenberg@tu-dresden.de
###############################################################################

###############################################################################
# this file specifies which functions will be generated
###############################################################################
# the source code (<isa>_functions.c) and templates (<isa>_functions.c.py) for
# each isa have to be placed in the source_files and templates directory, 
# respectively
###############################################################################

[VERSION]
major=1
minor=7
# additional information, e.g., "BETA"
info="4 (github)"

# optional features
enable_cuda=0
enable_win64=0
enable_mac=0
enable_arm=1

[ISA_NEON128]
template= neon128
feature_req= neon
fallback= func_aarch64_tx2_neon128_1t
flags = -mcpu=native
win64_incl = 0


###############################################################################
# supported processors
###############################################################################
# arch/model:   used as prefixes for function names in generated code
# threads:      generate code sequences for listed numbers of threads
# isa:          specifies the template that contains the required code snippets
# cpu_family:   cpu family of the processors that may use this code path
# cpu_model:    cpu models (within the cpu_family) that use this code path
# buffer_sizes: L1 cache size / L2 cache size / L3 cache size / memory per core
#               - sizes are defined per core
#               - SMT code paths use size/num_threads_per_core per thread
# lines:        minimal number of instruction groups for assembler loops
#               - SMT code will use lines/num_threads_per_core per thread
# instr_groups: defines which code snippets are used for each level
# amounts:      specifies proportion of accesses to each level
#               - sequence is repeated to reach the minimal number of lines
###############################################################################

[ThunderX2]
arch=		aarch64
model=		tx2
threads=	1
isa=		neon128
buffer_sizes=	23768,262144,33554432,8438840064
cpu_family=     99
cpu_model=      1
lines=          1536
instr_groups=   RAM_L,L3_L,L2_L,L1_LS,REG
proportion=     8,33,81,79,100
